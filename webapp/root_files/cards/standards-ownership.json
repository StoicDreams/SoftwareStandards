[
    {
        "name": "What is ownership?",
        "body": "An **owner** of a codebase or project within this context of standards is a developer that will be in charge of dictating the standards for that codebase/project.\n\nTypically this is more for standards that come from personal preferences, not standards that would be in place for performance or functional reasons. Though the owner should have authority and trust to deviate from performance|functional standards when they deem it necessary, but they should document in the code where and why they are deviated from these standards so future developers can easily understand why."
    },
    {
        "name": "Single Developer per Project | Codebase",
        "body": "When you have organized your teams so that you end up with projects that only have a single developer working in them, then that developer should be considered the owner of that codebase.\n\nWhen another developer takes over a codebase/project, they should have the freedom to refactor the code as the deem appropriate to conform to their personal standards so they can more easily manage and update the project."
    },
    {
        "name": "Multi-Developer Codebases | Projects",
        "body": "When you have multiple developers working in the same codebase at the same time, then allow each developer ownership over whatever files they are needing to change for the work they are doing.\n\nDevelopers should be given the freedom to change a file they are working in so it is easier to read and work in for them.\n\nMost modern IDE's developers are using will allow them to quickly reformat a file to match the standards they've defined in their IDE, taking just a few seconds after opening the file.\n\nThis maximizes the readability for that developer so they can maximize their efficiency in doing their job."
    },
    {
        "name": "Org | Manager | Team Ownership",
        "body": "In many cases these arbitrary, preference-based coding standards are dictated by a higher authority than the developer doing the work. These may come down from the organization/company level, or they may be dictated by some level of management above the team.\n\nIn some cases these coding standards are allowed to be decided by the team as a group, generally doing some form of voting to dictate the standards, that then must be applied to all projects worked on by that team.\n\n<webui-quote theme=\"danger\">\n\nThis is the most damaging form of ownership, and we strongly recommended to break away from doing this.\n\n</webui-quote>\n\nThe main arguments for doing this is code consistency and readability.\n\nFirst, readability is not a valid reason, as it is a subjective reason. Most of the time this readability improvement is at best applicable to a lead or manager who needs to do code review, but that is bad justification to make code more readable for a single person that is only reading the code 1% of the time, and less readable for the developers that are reading and writing the code 99% of the time. Or worse the readability is dictated from people higher up the chain that may never look at the code at all.\n\nAs far as the code consistency argument, this is an arbitrary benefit. If your code has consistent standards throughout, that is literally the only benefit you can say comes from that. And that benefit has no tangible value.\n\nCode consistency is not a requirement for making code that is easy to read and understand. It does not help with performance or keeping code bug free. It does not help with organization.\n\n<webui-quote theme=\"warning\">\n\nCode consistency standards really only serve as a form of micromanagement from wannabe-dictators to give them a sense of control and power over people. But it has the adverse affect of degrading developer moral and motivation, degrading product quality, and stifling creativity and innovation.\n\n</webui-quote>"
    }
]