[
    {
        "name": "Tenet 1: Keep it Simple",
        "body": "Keeping things simple means that software development should focus on delivering value in the simplest viable way. This is achieved by minimizing complexity in code, processes, and tools.\n\nKeeping things simple needs to be both a mentality and a habit, and is aimed at helping to reduce the cost of development, improve quality of both the code and software, and reduce the time to market. It also helps to keep the development process agile, as simpler code and processes are easier to change and adapt to new requirements.\n\n#### 1: Minimize Complexity\n\nAvoid unnecessary complexity in code, processes, and tools. This helps to reduce the cost of development, improve quality throughout, and reduce the time to market.\n\n#### 2: Eliminate Waste\n\nEliminate waste in the development process by removing unnecessary tasks, documentation, and other activities that do not add value. Eliminate code that is not being used and code comments that not adding value.\n\n#### 3: Prioritize Value\n\nPrioritize value over other factors such as features, aesthetics, and performance. This helps to ensure that development efforts are focused on delivering the most key features first. But also understand value doesn’t have to be monetarily based or exclusive to customers / users. Some value may be for developers, stakeholders, or others as well."
    },
    {
        "name": "Tenet 2: Code Ownership",
        "body": "Code Ownership is the concept that each repository within a team should have a designated owner responsible for its maintenance and improvement over time. The following are three core principles that can guide the implementation of Code Ownership:\n\n#### Assign Ownership of Code\n\nEach code repository should have a designated owner responsible for its overall quality, maintenance, and improvement over time. This owner should be the primary point of contact for all matters related to the code within that repository and have the authority to make decisions about its evolution, including code formatting and organization.\n\n#### Foster Collaboration Among Owners\n\nOwnership does not mean isolation. Code owners should collaborate with each other to share ideas and concepts and learn from each other’s different perspectives and opinions. They should communicate frequently and openly to avoid redundancy, minimize conflicts, and make sure everyone is aligned with the business and team goals.\n\n#### Rotate Ownership Over Time\n\nCode ownership is not a lifelong appointment. As projects evolve, so do the skills, interests, and availability of team members. To ensure that code remains fresh and up-to-date, and owners do not grow stagnant, ownership should rotate periodically. This approach fosters a sense of shared responsibility and prevents bottlenecks that can occur when a single person is responsible for too much code."
    },
    {
        "name": "Tenet 3: Continuous Agility",
        "body": "Continuous Agility means that teams should continuously adapt to changing requirements and market needs and be able to pivot quickly when necessary.\n\nContinuous agility helps to ensure that teams can respond to new challenges and opportunities, and that they are always focused on delivering value to their customers.\n\n#### Never follow with Absolution\n\nWhen working within principles, guidelines, best- practices, never constrain yourself to following them with absolute adherence. There is no one- size-fits-all solution that is the best solution for every situation.\n\n#### Be Customer-Focused\n\nMaintain a customer-focused mindset and continuously seek feedback to ensure that products are meeting their needs and expectations and adapt tasks based on the feedback loops.\n\n#### No Estimates or Time-Boxing\n\nBreak down projects and features into manageable tasks, but no task, feature, or project should be given deadlines or require developer estimates prior to or during active development."
    },
    {
        "name": "Tenet 4: Continuous Feedback Loops",
        "body": "Establishing continuous feedback loops throughout the software development process means that developers and teams should continuously gather feedback from their IDEs, compilers, analytics, stakeholders, customers, and team members, and use that feedback to refine the development process and features being delivered.\n\nContinuous feedback loops help teams and developers to stay focused on delivering value to customers, and to identify and address issues as early as possible in the development process. This helps to reduce the cost of development, improve quality, and increase customer satisfaction.\n\n#### Gather Feedback\n\nContinuously gather feedback from their tools, analytics, stakeholders, customers, and team members throughout the development process.\n\n#### Use Feedback to Inform Decisions\n\nUse feedback to inform decisions about features, design, and other aspects of the development process.\n\n#### Iterate Based on Feedback\n\nContinuously iterate on the development process based on feedback to improve the product and development process."
    },
    {
        "name": "Tenet 5: Continuous Automation",
        "body": "Establishing continuous automation throughout the software development process means that teams should continuously automate repetitive and time- consuming tasks, such as testing, building, and deployment.\n\nContinuous automation helps to reduce the time and effort required for these tasks, which in turn helps to increase productivity, improve quality, and reduce the time to market.\n\n#### Automate Everything Possible\n\nIdentify and automate every task that can be automated, such as testing, building, and deployment.\n\n#### Integrate Automation into the Development Process\n\nIntegrate automation tools and processes into the development process to reduce manual effort and increase efficiency. Always make this a top priority to do this as early as possible.\n\n#### Continuously Improve Automation\n\nContinuously improve automation processes to ensure that they are reliable, efficient, and effective."
    },
    {
        "name": "Tenet 6: Continuous Planning",
        "body": "Establishing continuous planning throughout the software development process means that teams should continuously plan and adjust the development process based on feedback and changing requirements. This also means that teams should spend minimal time planning development or features that are not being immediately worked on.\n\nContinuous planning helps teams to stay aligned with customer needs and market trends, and to make timely adjustments to the development process as needed. This helps to reduce the risk of developing products that do not meet customer needs or fail in the market.\n\n#### Emphasize Continuous Planning\n\nPrioritize planning throughout the development process, from initial requirements gathering to release planning.\n\n#### Use Data-Driven Approaches\n\nUse data-driven approaches, such as user feedback, A-B testing, and market trends, to inform planning decisions and adjust the development process.\n\n#### Continuously Refine Plans\n\nContinuously refine plans based on feedback, discoveries made during development, and changing requirements, and communicate updated plans to all stakeholders as they occur."
    },
    {
        "name": "Tenet 7: Continuous Collaboration",
        "body": "Establishing continuous collaboration throughout the software development process means that teams should continuously collaborate with all stakeholders, including customers, product owners, developers, and testers.\n\nContinuous collaboration helps to ensure that everyone is aligned with the project goals and objectives, and that everyone has a shared understanding of the product requirements and features.\n\n#### Foster a Collaborative Culture\n\nEstablish a collaborative culture that encourages open communication, sharing of ideas, and respect for all team members.\n\n#### Collaborate Throughout the Development Process\n\nCollaborate with all stakeholders throughout the development process, from requirements gathering to release planning.\n\n#### Use Collaborative Tools and Processes\n\nUse collaborative tools and processes, such as Notion and Teams, to facilitate collaboration among team members.\n\nTake special note that this does not require every person to handle all communication themselves. Instead, it is generally ideal to utilize a hierarchy of contacts that will pass on communications to those that need it, minimizing any developer downtime while still allowing information to be properly communicated.\n\nFor example, a software engineer is making a change to the plan, so they communicate that change to the project manager. The project manager in turn will communicate that change to other engineers that are directly affected as well as key stakeholders. Those key stakeholders may then communicate that change to other stakeholders, and so on."
    },
    {
        "name": "Tenet 8: Continuous Learning",
        "body": "Continuous learning means that developers and teams should be continuously learning to help improve their skills, processes, workflows, and products.\n\nContinuous learning helps to ensure that teams stay up to date with the latest technologies, methodologies, and practices, and that they continuously improve the quality of their products and the efficiency of their development process.\n\n#### Emphasize Continuous Learning\n\nPrioritize learning throughout the development process, from initial requirements gathering to post-release evaluations.\n\n#### Encourage Experimentation\n\nEncourage team members to experiment with new ideas, technologies, methodologies, and practices to continuously improve the development process and products.\n\n#### Foster a Culture of Learning\n\nFoster a culture of learning that encourages sharing of knowledge and experiences, both positive and negative, among team members and provides opportunities for learning and growth."
    },
    {
        "name": "Tenet 9: Continuous Testing",
        "body": "Establishing continuous testing throughout the software development process means that teams should continuously test their products throughout the development process, from requirements gathering to release, utilizing automated testing as much as possible.\n\nContinuous testing helps to ensure that teams catch and fix defects as early as possible in the development process, which then helps to reduce time resolving those defects.\n\n#### Establish a Test-Driven Development (TDD) approach\n\nApply a TDD approach, where testing is integrated into the development process, and tests are written before the code is developed.\n\n#### Automate Testing\n\nAutomate testing as much as possible, to increase efficiency and consistency. If a tool isn’t available to apply the type of testing you need, then take the time to build the tool so you can apply your tests.\n\n#### Test Continuously\n\nTest continuously throughout the development process, including unit tests, integration tests, and end-to-end tests."
    },
    {
        "name": "Tenet 10: Continuous Iterations",
        "body": "Establishing continuous iterations throughout the software development process means that teams should continuously iterate on their products and processes to improve their quality and efficiency.\n\nContinuous iterations help to ensure that teams are always improving their products and processes, and that they are continuously adapting to changing requirements and market needs.\n\n#### Emphasize Continuous Improvement\n\nPrioritize continuous improvement throughout the development process, from initial requirements gathering to post-release evaluations.\n\n#### Conduct Regular Retrospectives\n\nConduct regular retrospectives to review the development process and identify areas for improvement.\n\n#### Adapt Quickly\n\nAdapt quickly to changing requirements and market needs by iterating on products and processes."
    },
    {
        "name": "Tenet 11: Continuous Integrations",
        "body": "Establishing continuous integrations throughout the software development process means that teams should continuously integrate their code changes into a single source of truth, such as a shared repository while only using a single main branch and test their changes as frequently as possible.\n\nContinuous integrations help to ensure that teams are always working with the latest version of the codebase and that any issues are identified and resolved as quickly as possible.\n\n#### Single Branch Version Control\n\nUse a version control system to manage code changes and ensure that all team members are working with the latest version of the codebase. Ensure all development is done directly in a single main branch.\n\n#### Automate Integration Testing\n\nAutomate integration testing to ensure that code changes are tested thoroughly and that any issues are identified and resolved as quickly as possible.\n\n#### Integrate Frequently\n\nIntegrate code changes into the shared repository as frequently as possible, to ensure that team members are always working with the latest version of the codebase."
    },
    {
        "name": "Tenet 12: Continuous Delivery",
        "body": "Establishing continuous delivery throughout the software development process means that teams should aim to deploy their code changes to production as frequently as possible through completely automated processes.\n\nContinuous delivery helps to ensure that teams can deliver new features and improvements to their users quickly and efficiently. It also helps to reduce the risk associated with deploying code changes to production by automating the deployment process and ensuring that code changes have been thoroughly tested before deployment.\n\n#### Automate Production Deployment\n\nAutomate the deployment process from the moment code is pushed up from the developer’s machine all the way through production, only stopping from deploying if an automated test fails.\n\n#### Automate Development Deployments\n\nKeep tooling, documentation, and scripts available and easily accessible so any developer working on a project can quickly and easily setup local development environments with a focus on making the process as self-service as possible.\n\n#### Monitor and Measure\n\nMonitor and measure the performance of the software after every deployment to assure quality standards are met and performance never degrades unexpectedly. Again, this should be largely automated, but still apply manual checks as needed."
    }
]